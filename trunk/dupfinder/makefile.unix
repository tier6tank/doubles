#
#   dupfinder - search for duplicate files
#   Copyright (C) 2007-2008 Matthias Boehm
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

ifndef debug
debug = 1
endif

#define cygwin if cygwin is used (adds .exe to program file name)

ifndef cygwin
cygwin = 0
endif

outdir := unix
name := dupf
namegui := dupfgui
ifeq ($(cygwin), 1)
name := $(name).exe
endif
version := 
wxconfigopt := --static

ifeq ($(debug),1)
version := $(version)d
wxconfigopt := $(wxconfigopt) --debug=yes
else
wxconfigopt := $(wxconfigopt) --debug=no
endif

outdir := $(outdir)$(version)

nopchopt := `wx-config $(wxconfigopt) --cxxflags` -DwxUSE_STD_IOSTREAM=1
opt := $(nopchopt) -include ./$(outdir)/stdinc.h

ifeq ($(debug),1)
dbg = -D_DEBUG -DDEBUG -g
else
dbg = -DNDEBUG
endif

opt := $(opt) $(dbg) 
nopchopt := $(nopchopt) $(dbg)

libs = `wx-config $(wxconfigopt) --libs`
headers = dbl.h largeint.h ulargeint.h os_cc_specific.h os_cc_specific_includes.h stdinc.h

all: $(outdir) $(outdir)/$(name) $(outdir)/$(namegui)

#change that somewhen (with if exist ......) 
$(outdir): 
	-@mkdir $(outdir)

$(outdir)/$(name): $(outdir)/stdinc.h.gch $(outdir)/dupf.o $(outdir)/dbl.o $(outdir)/os_cc_specific.o
	g++ $(opt) -o "$(outdir)/$(name)" $(outdir)/dupf.o $(outdir)/dbl.o $(outdir)/os_cc_specific.o $(libs) 
ifneq ($(debug),1)
	strip -s $(outdir)/$(name)
endif

$(outdir)/$(namegui): $(outdir)/stdinc.h.gch $(outdir)/dupfgui.o $(outdir)/os_cc_specific.o \
	$(outdir)/dialog1.o $(outdir)/dialog2.o $(outdir)/dialog3.o $(outdir)/dbl.o
	g++ $(opt) -o "$(outdir)/$(namegui)" $(outdir)/dupfgui.o $(outdir)/os_cc_specific.o \
		$(outdir)/dialog1.o $(outdir)/dialog2.o $(outdir)/dialog3.o $(outdir)/dbl.o $(libs)
ifneq ($(debug),1)
	strip -s $(outdir)/$(namegui)
endif

$(outdir)/dbl.o: dbl.cpp $(headers)
	g++ $(opt) -c -o $(outdir)/dbl.o dbl.cpp

$(outdir)/dupf.o: dupf.cpp $(headers)
	g++ $(opt) -c -o $(outdir)/dupf.o dupf.cpp

$(outdir)/os_cc_specific.o: os_cc_specific.cpp $(headers)
	g++ $(opt) -c -o $(outdir)/os_cc_specific.o os_cc_specific.cpp

$(outdir)/stdinc.h.gch: stdinc.h os_cc_specific_includes.h
	g++ $(nopchopt) -c -x c++ -o $(outdir)/stdinc.h.gch stdinc.h

$(outdir)/dupfgui.o: dupfgui.cpp $(headers)
	g++ $(opt) -c -o $(outdir)/dupfgui.o dupfgui.cpp

$(outdir)/dialog1.o: dialog1.cpp $(headers)
	g++ $(opt) -c -o $(outdir)/dialog1.o dialog1.cpp

$(outdir)/dialog2.o: dialog2.cpp $(headers)
	g++ $(opt) -c -o $(outdir)/dialog2.o dialog2.cpp

$(outdir)/dialog3.o: dialog3.cpp $(headers)
	g++ $(opt) -c -o $(outdir)/dialog3.o dialog3.cpp


run:
	-$(outdir)/$(name)
